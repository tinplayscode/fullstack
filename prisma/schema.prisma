datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

model Account {
  id                       String  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  
  emailVerified DateTime?
  image         String?
  role          Role         @default(USER)
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  Comment       Comment[]
  CharityLog    CharityLog[]
  Post          Post[]
  Reaction      Reaction[]
  AdminLog      AdminLog[]
}

model VerificationToken {
  id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  projects    Project[]
}

model Project {
  id          String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name        String
  description String?
  ownerId     String    @db.ObjectId
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  comments    Comment[]
  money       Int

  Category   Category?    @relation(fields: [categoryId], references: [id])
  categoryId String?      @db.ObjectId
  CharityLog CharityLog[]
}

model Comment {
  id         String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  text       String
  authorId   String    @db.ObjectId
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  projectId  String    @db.ObjectId
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  lastEdited DateTime?
}

model CharityLog {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String   @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  data      String?
  message   String?
}

model Post {
  id         String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  title      String
  text       String
  authorId   String     @db.ObjectId
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  lastEdited DateTime?
  Reaction   Reaction[]
}

model Reaction {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  type      String
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model AdminLog {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  message   String?
}

enum Role {
  USER
  PHILANTHROPIST
  MODERATOR
  ADMIN
}
